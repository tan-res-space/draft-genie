name: Continuous Deployment

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/draft-genie

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - speaker-service
          - api-gateway
          - draft-service
          - rag-service
          - evaluation-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

  # Deploy to development environment
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment:
      name: development
      url: https://dev.draftgenie.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to development
        run: |
          echo "üöÄ Deploying to development environment..."
          # Add your deployment commands here
          # Example: kubectl, docker-compose, or cloud provider CLI
          
      - name: Verify deployment
        run: |
          echo "‚úÖ Verifying development deployment..."
          # Add health check commands

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.draftgenie.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your deployment commands here
      
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on staging..."
          # Add smoke test commands
      
      - name: Verify deployment
        run: |
          echo "‚úÖ Verifying staging deployment..."
          # Add health check commands

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://draftgenie.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment backup
        run: |
          echo "üíæ Creating backup before deployment..."
          # Add backup commands
      
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your deployment commands here
      
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on production..."
          # Add smoke test commands
      
      - name: Verify deployment
        run: |
          echo "‚úÖ Verifying production deployment..."
          # Add health check commands
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          # Add notification commands (Slack, email, etc.)
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed! Rolling back..."
          # Add rollback commands

  # Database migrations
  run-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run PostgreSQL migrations
        run: |
          echo "üóÑÔ∏è Running PostgreSQL migrations..."
          # npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Run MongoDB migrations
        run: |
          echo "üóÑÔ∏è Running MongoDB migrations..."
          # Add MongoDB migration commands

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            # Add success notification (Slack, Discord, email, etc.)
          else
            echo "‚ùå Deployment failed!"
            # Add failure notification
          fi

# Deployment configuration examples:
#
# For Kubernetes:
# - name: Deploy to Kubernetes
#   run: |
#     kubectl set image deployment/speaker-service speaker-service=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-speaker-service:${{ github.sha }}
#     kubectl rollout status deployment/speaker-service
#
# For Docker Compose:
# - name: Deploy with Docker Compose
#   run: |
#     docker-compose -f docker-compose.prod.yml pull
#     docker-compose -f docker-compose.prod.yml up -d
#
# For AWS ECS:
# - name: Deploy to ECS
#   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#   with:
#     task-definition: task-definition.json
#     service: draft-genie-service
#     cluster: draft-genie-cluster
#
# For Google Cloud Run:
# - name: Deploy to Cloud Run
#   uses: google-github-actions/deploy-cloudrun@v1
#   with:
#     service: draft-genie
#     image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:${{ github.sha }}
#
# For Azure Container Instances:
# - name: Deploy to Azure
#   uses: azure/aci-deploy@v1
#   with:
#     resource-group: draft-genie-rg
#     dns-name-label: draft-genie
#     image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:${{ github.sha }}

